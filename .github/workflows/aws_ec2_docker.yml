name: aws_ec2_docker to SpringBoot

on:
  push:
    branches: [ "main" ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  IMAGE_TAG: 1.0.${{ github.run_number }}
  NAME: board_java
  
permissions: write-all

# 빌드 Job
jobs:
  build:
    runs-on: ubuntu-22.04

    steps:
      - uses: actions/checkout@v3
      
      # JDK version 설정
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin' # jdk를 제공하는 vender사 이름 ex. zulu, adopt, microsoft
      
      - uses: actions/checkout@v3
      - run: touch ./src/main/resources/application.yaml
      - run: echo "${{ secrets.APPLICATION }}" > ./src/main/resources/application.yaml
      - run: cat ./src/main/resources/application.yaml
    
      # - uses: actions/upload-artifact@v2
      #   with:
      #     name: application.yaml
      #     path: ./src/main/resources/application.yaml
    
      # 그래들 캐싱 - 속도 향상 효과
      - name: Gradle Caching
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-
      
      # gradlew 권한 추가
      - name: Grant Execute Permission For Gradlew
        run: chmod +x gradlew
    
      # test를 제외한 프로젝트 빌드
      - name: Build With Gradle
        run: ./gradlew clean build -x test
        
      # github container Login
      - name: Login to ghcr
        uses: docker/login-action@v2
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.repository_owner }}
          password: ${{ secrets.ACCESS_TOKEN }}
        
      # github Container에 Docker build 후 이미지 push
      # *.jar file no such file or directory 오류 나올 시 context 경로 재 확인
      - name: Build and push Docker Image
        id: build-and-push
        uses: docker/build-push-action@v3
        with:
          push: true
          context: ./ 
          tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}
          labels: ${{ steps.meta.outputs.labels }}
          
  deploy:
    needs: build
    name: Deploy
    runs-on: [ self-hosted ]
    steps:
      - name: Login to ghcr
        uses: docker/login-action@v2
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.ACCESS_TOKEN }}
          
      - name: Docker run
        run: |
          docker stop ${{ env.NAME }} && docker rm ${{ env.NAME }}
          docker run -d -p 8000:8080 --name ${{ env.NAME }} --restart always ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}
