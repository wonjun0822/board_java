name: aws_ec2_docker to Springboot

on:
  push:
    branches: [ "main" ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: board_java
  IMAGE_TAG: 1.0.${{ github.run_number }}

permissions: write-all

# 빌드 Job
jobs:
  build:
    runs-on: ubuntu-22.04

    steps:
      - uses: actions/checkout@v3
      
      # JDK version 설정
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin' # jdk를 제공하는 vender사 이름 ex. zulu, adopt, microsoft
          
      # 그래들 캐싱 - 속도 향상 효과
      - name: Gradle Caching
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-
      
      # gradlew 권한 추가
      - name: Grant Execute Permission For Gradlew
        run: chmod +x gradlew
    
      # test를 제외한 프로젝트 빌드
      - name: Build With Gradle
        run: ./gradlew clean build -x test
        
      - name: Login to ghcr
        uses: docker/login-action@v1
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.repository_owner }}
          password: ${{ secrets.ACCESS_TOKEN }}

      - name: Build and push Docker Image
        id: build-and-push
        uses: docker/build-push-action@v3
        with:
          push: true
          file: ./Dockerfile
          tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}
          labels: ${{ steps.meta.outputs.labels }}
          
#       - name: docker build
#         run: docker build -t ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }} .
      
#       - name: Push docker images
#         run: docker push ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}
